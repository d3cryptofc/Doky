{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> Doky Tool    A intuitive CLI tool and Python Library for manage your Docker-In-Docker instances   from Play With Docker Any questions? Open an issue! </p>"},{"location":"#usage","title":"Usage","text":"<pre><code>$ doky\n\nUsage: doky [OPTIONS] COMMAND [ARGS]...\n\n  Doky is a intuitive library and CLI tool for manage your Docker-In-Docker\n  instances from Play With Docker Lab\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n  version  Show current app version.\n\n  User authentication management:\n    auth me                       Show your authentication user informations.\n    auth oauth [--provider NAME]  Request for an OAuth URL to authenticate with a provider.\n    auth providers                List available OAuth providers to request an OAuth URL.\n    auth token &lt;TOKEN&gt;            Set the authentication session ID.\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>Will you only use the CLI? Then install with pipx:</p> <pre><code>$ pipx install doky\n</code></pre> <p>Will you use both? Then you can install with pip/poetry/etc:</p> <pre><code>$ pip install doky\n$ poetry add doky\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#user-session-authentication-manager","title":"User Session Authentication Manager","text":"<p>These are the user authentication features. See more.</p>"},{"location":"quickstart/#listing-available-oauth-providers","title":"Listing available OAuth providers","text":"<p>Want to know which OAuth authentication providers are available? Just do it:</p> <p>Example</p> CLIPython <p>Usage:</p> <pre><code>$ doky auth providers\n</code></pre> <p>Result:</p> <p>Success! These are the available OAuth providers:</p> <p>- docker</p> <p>Code:</p> <pre><code>from doky import AuthSession\nprint(AuthSession.get_providers())\n</code></pre> <p>Result:</p> <pre><code>['docker']\n</code></pre> <p>See more</p>"},{"location":"quickstart/#requesting-for-an-oauth-url","title":"Requesting for an OAuth URL","text":"<p>Save time by generating the authentication URL, default provider is docker:</p> <p>Example</p> CLIPython <p>Usage:</p> <pre><code>$ doky auth oauth [--provider NAME]\n</code></pre> <p>Result:</p> <p>The OAuth URL was obtained successfully!</p> <p>https://login.docker.com/authorize/?client_id=XXXXXX&amp;nonce=XXXXXX&amp;redirect_uri=XXXXXX&amp;response_type=code&amp;scope=XXXXXX&amp;state=XXXXXX</p> <p>Follow these steps:</p> <ol> <li>Open the OAuth URL in your browser to authenticate.</li> <li>When authenticated, copy the cookie value named <code>id</code>, you may need to use DevTools.</li> <li>Set the token typing in your terminal: doky auth token  <p>Code:</p> <pre><code>from doky import AuthSession\nprint(AuthSession.request_oauth_url())\n</code></pre> <p>Result:</p> <pre><code>'https://login.docker.com/authorize/?client_id=XXXXXX&amp;nonce=XXXXXX&amp;redirect_uri=XXXXXX&amp;response_type=code&amp;scope=XXXXXX&amp;state=XXXXXX'\n</code></pre> <p>See more</p> <p>It's not yet possible to automate authentication :(</p> <p>Unfortunately, no way was found to wait for authentication to complete or even obtain the necessary authentication credentials so that it could be fully automated.</p> <p>If you find a way that isn't as complicated as setting up a proxy, using webdrivers or browser extensions, feel free to open a pull request or an issue to discuss it.</p>"},{"location":"quickstart/#configuring-authentication-token-and-getting-authentication-information","title":"Configuring authentication token and getting authentication information","text":"<p>After authenticating to Play With Docker, copy the cookie value named <code>id</code> and insert it below:</p> <p>Example</p> CLIPython <p>Usage:</p> <pre><code>$ doky auth token &lt;YOUR-TOKEN-HERE&gt; &amp;&amp; doky auth me\n</code></pre> <p>Result:</p> <p>Token saved successfully!</p> <p>Try to run doky auth me to check your session.  Congratulations! You are logged :)</p> <p>This is your authentication user informations:</p> <p>- id: XXXXXX - name: d3cryptofc - provider_user_id: 1000XXX - avatar: https://avatars.io/twitter/d3cryptofc - provider: docker - email: d3cryptofc@gmail.com - banned: False</p> <p>Code:</p> <pre><code>from doky import AuthSession\nauth = AuthSession('&lt;YOUR SESSION ID HERE&gt;')\n</code></pre> <p>... but this alone does not guarantee that you are logged in, to find out, do this:</p> <pre><code>from httpx import HTTPStatusError\n\ntry:\n    print(auth.get_me())\nexcept HTTPStatusError as exception:\n    # Checking if status code response is not 401 Unauthorized.\n    if exception.response.status_code != 401:\n        # Raising same exception again.\n        raise\n\n    # Else, authentication definitely failed.\n    print(\"Authentication failed :(\")\n</code></pre> <p>Result:</p> <pre><code>{\n    'id': 'XXXXXX',\n    'name': 'd3cryptofc',\n    'provider_user_id': '1000XXX',\n    'avatar': 'https://avatars.io/twitter/d3cryptofc',\n    'provider': 'docker',\n    'email': 'd3cryptofc@gmail.com',\n    'banned': False\n}\n</code></pre> <p>See more</p>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#doky.AuthSession","title":"<code>doky.AuthSession</code>","text":"<p>Creates an object to manage the authentication session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Your session ID from labs.play-with-docker.com</p> required Source code in <code>doky/auth_session.py</code> <pre><code>class AuthSession:\n    \"\"\"\n    Creates an object to manage the authentication session.\n\n    Parameters:\n        session_id:\n            Your session ID from labs.play-with-docker.com\n    \"\"\"\n    def __init__(self, session_id: str) -&gt; None:\n        # Checking if the `session_id` parameter is a string type.\n        if not isinstance(session_id, str):\n            raise errors.type_error(('session_id', session_id), str)\n\n        # Creating a http client session.\n        self._http_client = create_http_client()\n\n        # Using the same cookie from navigator.\n        self._http_client.cookies['id'] = session_id\n\n    @staticmethod\n    def get_providers() -&gt; List[str]:\n        \"\"\"\n        Static method that requests for a list of available providers.\n\n        Returns:\n            List of available providers.\n\n        Return Example:\n            ```python3\n            ['docker']\n            ```\n\n        Raises:\n            httpx.HTTPStatusError:\n                Bad response HTTP status code.\n        \"\"\"\n        # Creating a http client session and requesting for a providers list.\n        request = create_http_client().get('/oauth/providers')\n\n        try:\n            # Raise if response status code is bad.\n            request.raise_for_status()\n        except httpx.HTTPStatusError as exception:\n            # Adding an exception message note.\n            exception.add_note('\\n' + errors.OPEN_AN_ISSUE)\n            # Raising the same exception again.\n            raise\n\n        # Returning providers list.\n        return request.json()\n\n    @staticmethod\n    def request_oauth_url(provider: str = 'docker') -&gt; str:\n        \"\"\"\n        Static method that requests an OAuth URL to a provider.\n\n        Parameters:\n            provider:\n                The OAuth available provider.\n\n        Returns:\n            The OAuth URL for authentication.\n\n        Return Example:\n            ```\n            https://login.docker.com/authorize/?client_id=XXXXXX&amp;nonce=XXXXXX&amp;redirect_uri=XXXXXX&amp;response_type=code&amp;scope=XXXXXX&amp;state=XXXXXX\n            ```\n\n        Raises:\n            RuntimeError: Some unexpected error.\n        \"\"\"\n        # Checking if the `provider` parameter is a string type.\n        if not isinstance(provider, str):\n            raise errors.type_error(('provider', provider), str)\n\n        # Creating a http client session and requesting OAuth URL from the\n        # provider specified.\n        request = create_http_client().get(\n            url='/oauth/providers/' + urlencode(provider) + '/login',\n            follow_redirects=False\n        )\n\n        # Raise an exception if the response status code is not 302 FOUND.\n        if request.status_code != HTTPStatus.FOUND:\n            raise RuntimeError(\n                'The authentication provider endpoint is not redirecting, '\n                'perhaps it is broken.\\n\\n' + errors.OPEN_AN_ISSUE\n            )\n\n        # Getting OAuth URL from redirect header Location.\n        oauth_url = request.headers.get('Location')\n\n        # Raise an exception if the redirect header location doesn't exists.\n        if not oauth_url:\n            raise RuntimeError(\n                'It appears that the server is not returning the '\n                'authentication URL.\\n\\n' + errors.OPEN_AN_ISSUE\n            )\n\n        # Returning the OAuth URL.\n        return oauth_url\n\n    def get_me(self) -&gt; dict:\n        \"\"\"\n        Bound method that requests for current user session informations.\n\n        Returns:\n            Current user session informations.\n\n        Return Example:\n            ```python3\n            {\n                'id': 'XXXXXX',\n                'name': 'd3cryptofc',\n                'provider_user_id': '1000XXX',\n                'avatar': 'https://avatars.io/twitter/d3cryptofc',\n                'provider': 'docker',\n                'email': 'd3cryptofc@gmail.com',\n                'banned': False\n            }\n            ```\n\n        Raises:\n            httpx.HTTPStatusError:\n                Bad response HTTP status code.\n        \"\"\"\n        # Requesting for current user session informations.\n        request = self._http_client.get('/users/me')\n\n        try:\n            # Raise if response status code is bad.\n            request.raise_for_status()\n        except httpx.HTTPStatusError as exception:\n            # Adding an exception message note.\n            exception.add_note('\\n' + errors.OPEN_AN_ISSUE)\n            # Raising the same exception again.\n            raise\n\n        # Returning the current user session informations.\n        return request.json()\n</code></pre>"},{"location":"reference/#doky.AuthSession.get_me","title":"<code>get_me()</code>","text":"<p>Bound method that requests for current user session informations.</p> <p>Returns:</p> Type Description <code>dict</code> <p>Current user session informations.</p> Return Example <pre><code>{\n    'id': 'XXXXXX',\n    'name': 'd3cryptofc',\n    'provider_user_id': '1000XXX',\n    'avatar': 'https://avatars.io/twitter/d3cryptofc',\n    'provider': 'docker',\n    'email': 'd3cryptofc@gmail.com',\n    'banned': False\n}\n</code></pre> <p>Raises:</p> Type Description <code>HTTPStatusError</code> <p>Bad response HTTP status code.</p> Source code in <code>doky/auth_session.py</code> <pre><code>def get_me(self) -&gt; dict:\n    \"\"\"\n    Bound method that requests for current user session informations.\n\n    Returns:\n        Current user session informations.\n\n    Return Example:\n        ```python3\n        {\n            'id': 'XXXXXX',\n            'name': 'd3cryptofc',\n            'provider_user_id': '1000XXX',\n            'avatar': 'https://avatars.io/twitter/d3cryptofc',\n            'provider': 'docker',\n            'email': 'd3cryptofc@gmail.com',\n            'banned': False\n        }\n        ```\n\n    Raises:\n        httpx.HTTPStatusError:\n            Bad response HTTP status code.\n    \"\"\"\n    # Requesting for current user session informations.\n    request = self._http_client.get('/users/me')\n\n    try:\n        # Raise if response status code is bad.\n        request.raise_for_status()\n    except httpx.HTTPStatusError as exception:\n        # Adding an exception message note.\n        exception.add_note('\\n' + errors.OPEN_AN_ISSUE)\n        # Raising the same exception again.\n        raise\n\n    # Returning the current user session informations.\n    return request.json()\n</code></pre>"},{"location":"reference/#doky.AuthSession.get_providers","title":"<code>get_providers()</code>  <code>staticmethod</code>","text":"<p>Static method that requests for a list of available providers.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of available providers.</p> Return Example <pre><code>['docker']\n</code></pre> <p>Raises:</p> Type Description <code>HTTPStatusError</code> <p>Bad response HTTP status code.</p> Source code in <code>doky/auth_session.py</code> <pre><code>@staticmethod\ndef get_providers() -&gt; List[str]:\n    \"\"\"\n    Static method that requests for a list of available providers.\n\n    Returns:\n        List of available providers.\n\n    Return Example:\n        ```python3\n        ['docker']\n        ```\n\n    Raises:\n        httpx.HTTPStatusError:\n            Bad response HTTP status code.\n    \"\"\"\n    # Creating a http client session and requesting for a providers list.\n    request = create_http_client().get('/oauth/providers')\n\n    try:\n        # Raise if response status code is bad.\n        request.raise_for_status()\n    except httpx.HTTPStatusError as exception:\n        # Adding an exception message note.\n        exception.add_note('\\n' + errors.OPEN_AN_ISSUE)\n        # Raising the same exception again.\n        raise\n\n    # Returning providers list.\n    return request.json()\n</code></pre>"},{"location":"reference/#doky.AuthSession.request_oauth_url","title":"<code>request_oauth_url(provider='docker')</code>  <code>staticmethod</code>","text":"<p>Static method that requests an OAuth URL to a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>The OAuth available provider.</p> <code>'docker'</code> <p>Returns:</p> Type Description <code>str</code> <p>The OAuth URL for authentication.</p> Return Example <pre><code>https://login.docker.com/authorize/?client_id=XXXXXX&amp;nonce=XXXXXX&amp;redirect_uri=XXXXXX&amp;response_type=code&amp;scope=XXXXXX&amp;state=XXXXXX\n</code></pre> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>Some unexpected error.</p> Source code in <code>doky/auth_session.py</code> <pre><code>@staticmethod\ndef request_oauth_url(provider: str = 'docker') -&gt; str:\n    \"\"\"\n    Static method that requests an OAuth URL to a provider.\n\n    Parameters:\n        provider:\n            The OAuth available provider.\n\n    Returns:\n        The OAuth URL for authentication.\n\n    Return Example:\n        ```\n        https://login.docker.com/authorize/?client_id=XXXXXX&amp;nonce=XXXXXX&amp;redirect_uri=XXXXXX&amp;response_type=code&amp;scope=XXXXXX&amp;state=XXXXXX\n        ```\n\n    Raises:\n        RuntimeError: Some unexpected error.\n    \"\"\"\n    # Checking if the `provider` parameter is a string type.\n    if not isinstance(provider, str):\n        raise errors.type_error(('provider', provider), str)\n\n    # Creating a http client session and requesting OAuth URL from the\n    # provider specified.\n    request = create_http_client().get(\n        url='/oauth/providers/' + urlencode(provider) + '/login',\n        follow_redirects=False\n    )\n\n    # Raise an exception if the response status code is not 302 FOUND.\n    if request.status_code != HTTPStatus.FOUND:\n        raise RuntimeError(\n            'The authentication provider endpoint is not redirecting, '\n            'perhaps it is broken.\\n\\n' + errors.OPEN_AN_ISSUE\n        )\n\n    # Getting OAuth URL from redirect header Location.\n    oauth_url = request.headers.get('Location')\n\n    # Raise an exception if the redirect header location doesn't exists.\n    if not oauth_url:\n        raise RuntimeError(\n            'It appears that the server is not returning the '\n            'authentication URL.\\n\\n' + errors.OPEN_AN_ISSUE\n        )\n\n    # Returning the OAuth URL.\n    return oauth_url\n</code></pre>"}]}